/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include "include/builtinvotes"

#define VERSION "1.0"

new Handle:g_Vote = INVALID_HANDLE;

public Plugin:myinfo = 
{
	name = "BuiltinVotes Test Kick Vote",
	author = "Powerlord",
	description = "Test Kick vote for BuiltinVotes. Works will all game types.",
	version = VERSION,
	url = "https://forums.alliedmods.net/showthread.php?t=162164"
}

public OnPluginStart()
{
	RegAdminCmd("testkickvote", HandleTestVote, ADMFLAG_VOTE, "Start a test vote.");
}

public Action:HandleTestVote(client, args)
{
	if (IsNewBuiltinVoteAllowed())
	{
		new target = 0;
		g_Vote = CreateBuiltinVote(HandleVote, BuiltinVoteType_Kick, BuiltinVoteAction_Cancel | BuiltinVoteAction_VoteEnd | BuiltinVoteAction_End);
		for (new i = 1; i <= MaxClients; i++)
		{
			if (i != client)
			{
				target = i;
				break;
			}
		}
			
		if (client > 0)
		{
			SetBuiltinVoteInitiator(g_Vote, client);
		}
		if (target > 0)
		{
			SetBuiltinVoteTarget(g_Vote, GetClientUserId(target));
		}
		//SetBuiltinVoteArgument(g_Vote, "Did this vote work?");
		DisplayBuiltinVoteToTeam(g_Vote, GetClientTeam(client), 20);
		//DisplayBuiltinVoteToAll(g_Vote, 20);
	}
	else
	{
		ReplyToCommand(client, "Vote cannot be started.");
	}
	
	return Plugin_Handled;
}

public HandleVote(Handle:vote, BuiltinVoteAction:action, param1, param2)
{
	switch (action)
	{
		case BuiltinVoteAction_End:
		{
			g_Vote = INVALID_HANDLE;
			CloseHandle(vote);
		}
		
		case BuiltinVoteAction_Cancel:
		{
			DisplayBuiltinVoteFail(vote, BuiltinVoteFailReason:param1);
		}
		
		case BuiltinVoteAction_VoteEnd:
		{
			if (param1 == BUILTINVOTES_VOTE_YES)
			{
				new target = GetBuiltinVoteTarget(vote);
				new targetId = GetClientOfUserId(target);
				decl String:name[MAX_NAME_LENGTH];
				GetClientName(targetId, name, MAX_NAME_LENGTH);
				
				DisplayBuiltinVotePass(vote, name);
			}
			else if (param1 == BUILTINVOTES_VOTE_NO)
			{
				DisplayBuiltinVoteFail(vote, BuiltinVoteFail_Loses);
			}
			else
			{
				// Should never happen, but is here as a diagnostic
				DisplayBuiltinVoteFail(vote, BuiltinVoteFail_Generic);
				LogMessage("Vote failure. winner = %d", param1);
			}
		}
	}
}